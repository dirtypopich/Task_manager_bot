import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime

from database import (
    init_db,
    add_task,
    get_tasks,
    update_task_status,
    update_task_text,
    update_task_priority,
    update_task_due_datetime
)

from config import TOKEN

bot = Bot(token=TOKEN)
dp = Dispatcher()

# ------------------------------------------------
# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
# ------------------------------------------------
class TaskState(StatesGroup):
    waiting_for_task_text = State()      # –∂–¥—ë–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
    waiting_for_task_priority = State()  # –∂–¥—ë–º, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–µ—Ä–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–∫–Ω–æ–ø–∫–æ–π)
    waiting_for_task_deadline = State()  # –∂–¥—ë–º –¥–∞—Ç—É/–≤—Ä–µ–º—è (–∏–ª–∏ "–Ω–µ—Ç")

    waiting_for_edit_text = State()
    waiting_for_edit_priority = State()
    waiting_for_edit_deadline = State()

# ------------------------------------------------
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (ReplyKeyboard)
# ------------------------------------------------
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üÜï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")],
        [KeyboardButton(text="üìä –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True
)

# ------------------------------------------------
# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
# ------------------------------------------------
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "- üÜï –î–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ (—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –ø–æ –∫–Ω–æ–ø–∫–µ –∏ –¥–µ–¥–ª–∞–π–Ω–æ–º)\n"
        "- üìã –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö\n"
        "- üìä –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏\n"
        "- ‚úÖ –ó–∞–≤–µ—Ä—à–∞—Ç—å –∑–∞–¥–∞—á–∏, ‚ùå –û—Ç–º–µ–Ω—è—Ç—å –∏ —Ç.–¥.\n"
        "–ü–æ–µ—Ö–∞–ª–∏!"
    )
    await message.answer(text, reply_markup=main_keyboard)

# ------------------------------------------------
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ - —à–∞–≥ 1 (—Ç–µ–∫—Å—Ç)
# ------------------------------------------------
@dp.message(lambda message: message.text == "üÜï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def start_adding_task(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
    await state.set_state(TaskState.waiting_for_task_text)

@dp.message(TaskState.waiting_for_task_text)
async def process_task_text(message: types.Message, state: FSMContext):
    task_text = message.text.strip()
    if not task_text:
        await message.answer("‚ö†Ô∏è –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ FSM
    await state.update_data(task_text=task_text)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏
    priority_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üî¥ –í—ã—Å–æ–∫–∏–π",  callback_data="priority_high"),
            InlineKeyboardButton(text="üü° –°—Ä–µ–¥–Ω–∏–π", callback_data="priority_medium"),
            InlineKeyboardButton(text="üü¢ –ù–∏–∑–∫–∏–π",  callback_data="priority_low"),
        ]
    ])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏:", reply_markup=priority_keyboard)
    await state.set_state(TaskState.waiting_for_task_priority)

# ------------------------------------------------
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ - —à–∞–≥ 2 (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —á–µ—Ä–µ–∑ callback)
# ------------------------------------------------
@dp.callback_query(lambda c: c.data.startswith("priority_"))
async def process_task_priority_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ (high/medium/low).
    """
    data = callback_query.data  # –Ω–∞–ø—Ä–∏–º–µ—Ä, "priority_high"
    if data == "priority_high":
        priority = "–≤—ã—Å–æ–∫–∏–π"
    elif data == "priority_medium":
        priority = "—Å—Ä–µ–¥–Ω–∏–π"
    else:
        priority = "–Ω–∏–∑–∫–∏–π"

    await state.update_data(priority=priority)

    # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –¥–µ–¥–ª–∞–π–Ω–∞
    await callback_query.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–µ–¥–ª–∞–π–Ω–∞ (–ø—Ä–∏–º–µ—Ä: 25.12.2025 14:30)\n"
        "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω –Ω–µ –≤–∞–∂–µ–Ω."
    )
    await state.set_state(TaskState.waiting_for_task_deadline)

# ------------------------------------------------
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ - —à–∞–≥ 3 (–¥–µ–¥–ª–∞–π–Ω)
# ------------------------------------------------
@dp.message(TaskState.waiting_for_task_deadline)
async def process_task_deadline(message: types.Message, state: FSMContext):
    due_input = message.text.strip().lower()
    if due_input == "–Ω–µ—Ç":
        due_datetime_str = ""
    else:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É
        try:
            parsed_dt = datetime.strptime(due_input, "%d.%m.%Y %H:%M")
            due_datetime_str = parsed_dt.strftime("%Y-%m-%d %H:%M")
        except ValueError:
            await message.answer("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: 25.12.2025 14:30 –∏–ª–∏ '–Ω–µ—Ç'.")
            return

    # –î–æ—Å—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM (—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    user_data = await state.get_data()
    task_text = user_data["task_text"]
    priority = user_data["priority"]

    # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è (—Ç–µ–∫—É—â–∞—è)
    creation_date = datetime.today().strftime('%Y-%m-%d')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É
    await add_task(
        user_id=message.from_user.id,
        task_text=task_text,
        creation_date=creation_date,
        priority=priority,
        due_datetime=due_datetime_str
    )

    await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_keyboard)
    await state.clear()

# ------------------------------------------------
# –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
# ------------------------------------------------
from aiogram.utils.keyboard import InlineKeyboardBuilder

@dp.message(lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
async def show_tasks(message: types.Message):
    tasks = await get_tasks(message.from_user.id, status="pending")
    if not tasks:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.", reply_markup=main_keyboard)
        return

    kb_builder = InlineKeyboardBuilder()

    for t in tasks:
        task_id = t[0]
        task_text = t[1]
        priority  = t[3] or "–Ω–µ—Ç"
        button_text = f"{task_text[:30]}... (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority})"
        # add(Button) –¥–æ–±–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É (–∏–ª–∏ –≤ —Ç—É –∂–µ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞–Ω—ã)
        kb_builder.button(text=button_text, callback_data=f"task_{task_id}")
        kb_builder.adjust(1)  # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ

    # kb_builder.as_markup() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç InlineKeyboardMarkup
    inline_kb = kb_builder.as_markup()

    await message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=inline_kb)


# ------------------------------------------------
# –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–µ–π
# ------------------------------------------------
@dp.callback_query(lambda c: c.data.startswith("task_"))
async def task_action_menu(callback_query: types.CallbackQuery):
    task_id = callback_query.data.split("_")[1]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úèÔ∏è –¢–µ–∫—Å—Ç", callback_data=f"edit_text_{task_id}"),
            InlineKeyboardButton(text="üè∑Ô∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", callback_data=f"edit_priority_{task_id}"),
            InlineKeyboardButton(text="üóìÔ∏è –î–µ–¥–ª–∞–π–Ω", callback_data=f"edit_deadline_{task_id}")
        ],
        [
            InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"done_{task_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{task_id}")
        ]
    ])
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# ------------------------------------------------
# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
# ------------------------------------------------
@dp.callback_query(lambda c: c.data.startswith("edit_text_"))
async def edit_task_text_callback(callback_query: types.CallbackQuery, state: FSMContext):
    task_id = callback_query.data.split("_")[2]
    await state.update_data(task_id=task_id)
    await state.set_state(TaskState.waiting_for_edit_text)
    await callback_query.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏:")

@dp.message(TaskState.waiting_for_edit_text)
async def save_edited_text(message: types.Message, state: FSMContext):
    new_text = message.text.strip()
    if not new_text:
        await message.answer("‚ö†Ô∏è –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    data = await state.get_data()
    task_id = data["task_id"]
    await update_task_text(task_id, new_text)

    await message.answer("‚úÖ –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=main_keyboard)
    await state.clear()

# ------------------------------------------------
# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∑–∞–¥–∞—á–∏
# ------------------------------------------------
@dp.callback_query(lambda c: c.data.startswith("edit_priority_"))
async def edit_task_priority_callback(callback_query: types.CallbackQuery, state: FSMContext):
    task_id = callback_query.data.split("_")[2]
    await state.update_data(task_id=task_id)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    priority_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üî¥ –í—ã—Å–æ–∫–∏–π",  callback_data="setpriority_high"),
            InlineKeyboardButton(text="üü° –°—Ä–µ–¥–Ω–∏–π", callback_data="setpriority_medium"),
            InlineKeyboardButton(text="üü¢ –ù–∏–∑–∫–∏–π",  callback_data="setpriority_low"),
        ]
    ])
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:", reply_markup=priority_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
@dp.callback_query(lambda c: c.data.startswith("setpriority_"))
async def set_task_priority_callback(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data  # "setpriority_high"/"setpriority_medium"/"setpriority_low"
    if data == "setpriority_high":
        new_priority = "–≤—ã—Å–æ–∫–∏–π"
    elif data == "setpriority_medium":
        new_priority = "—Å—Ä–µ–¥–Ω–∏–π"
    else:
        new_priority = "–Ω–∏–∑–∫–∏–π"

    user_data = await state.get_data()
    task_id = user_data["task_id"]

    await update_task_priority(task_id, new_priority)
    await callback_query.message.answer("‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=main_keyboard)
    await state.clear()

# ------------------------------------------------
# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞
# ------------------------------------------------
@dp.callback_query(lambda c: c.data.startswith("edit_deadline_"))
async def edit_task_deadline_callback(callback_query: types.CallbackQuery, state: FSMContext):
    task_id = callback_query.data.split("_")[2]
    await state.update_data(task_id=task_id)
    await state.set_state(TaskState.waiting_for_edit_deadline)
    await callback_query.message.answer(
        "üóìÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É/–≤—Ä–µ–º—è –¥–µ–¥–ª–∞–π–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 25.12.2025 14:30)\n"
        "–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–∞."
    )

@dp.message(TaskState.waiting_for_edit_deadline)
async def save_edited_deadline(message: types.Message, state: FSMContext):
    due_input = message.text.strip().lower()
    if due_input == "–Ω–µ—Ç":
        due_datetime_str = ""
    else:
        try:
            parsed_dt = datetime.strptime(due_input, "%d.%m.%Y %H:%M")
            due_datetime_str = parsed_dt.strftime("%Y-%m-%d %H:%M")
        except ValueError:
            await message.answer("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.2025 14:30 –∏–ª–∏ '–Ω–µ—Ç'.")
            return

    data = await state.get_data()
    task_id = data["task_id"]

    await update_task_due_datetime(task_id, due_datetime_str)
    await message.answer("‚úÖ –î–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=main_keyboard)
    await state.clear()

# ------------------------------------------------
# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
# ------------------------------------------------
@dp.callback_query(lambda c: c.data.startswith("done_"))
async def mark_done(callback_query: types.CallbackQuery):
    task_id = callback_query.data.split("_")[1]
    await update_task_status(task_id, "done")
    await callback_query.message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=main_keyboard)

# ------------------------------------------------
# –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏
# ------------------------------------------------
@dp.callback_query(lambda c: c.data.startswith("cancel_"))
async def cancel_task(callback_query: types.CallbackQuery):
    task_id = callback_query.data.split("_")[1]
    await update_task_status(task_id, "canceled")
    await callback_query.message.answer("‚ùå –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!", reply_markup=main_keyboard)

# ------------------------------------------------
# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö
# ------------------------------------------------
@dp.message(lambda message: message.text == "üìä –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ")
async def show_completed_and_canceled(message: types.Message):
    done_tasks = await get_tasks(message.from_user.id, status="done", grouped_by_date=True)
    canceled_tasks = await get_tasks(message.from_user.id, status="canceled", grouped_by_date=True)

    if not done_tasks and not canceled_tasks:
        await message.answer("‚úÖ‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.", reply_markup=main_keyboard)
        return

    text = "üìä –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n"

    # done_tasks –∏ canceled_tasks - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä–∏ –≤–∏–¥–∞ {date: [...], date: [...]}
    # –ì–¥–µ –∫–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å - (task_id, text, priority, due)
    for date_key, tasks in sorted(done_tasks.items()):
        text += f"üìÖ {date_key} (‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ):\n"
        for task_id, task_text, priority, due in tasks:
            line = f"  - {task_text}"
            if priority:
                line += f" [–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}]"
            if due:
                line += f" [–î–µ–¥–ª–∞–π–Ω: {due}]"
            text += line + "\n"

    for date_key, tasks in sorted(canceled_tasks.items()):
        text += f"\nüìÖ {date_key} (‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ):\n"
        for task_id, task_text, priority, due in tasks:
            line = f"  - {task_text}"
            if priority:
                line += f" [–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}]"
            if due:
                line += f" [–î–µ–¥–ª–∞–π–Ω: {due}]"
            text += line + "\n"

    await message.answer(text, reply_markup=main_keyboard)

# ------------------------------------------------
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ------------------------------------------------
async def main():
    await init_db()
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
