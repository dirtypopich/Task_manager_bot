import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import init_db, add_task, get_tasks, update_task_status , update_task_text
from config import TOKEN
from datetime import datetime

bot = Bot(token=TOKEN)
dp = Dispatcher()


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
class TaskState(StatesGroup):
    waiting_for_task_text = State()
    waiting_for_edit_text = State()
    waiting_for_edit_input = State()


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É)
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üÜï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")],
        [KeyboardButton(text="üìä –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True
)


# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "- üÜï –î–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏\n"
        "- üìã –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á\n"
        "- üìä –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏\n"
        "- ‚úèÔ∏è –ü–æ–∑–≤–æ–ª—è—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –∑–∞–≤–µ—Ä—à–∞—Ç—å –∏ –æ—Ç–º–µ–Ω—è—Ç—å –∑–∞–¥–∞—á–∏\n"
        "- üîÑ –ü–æ–∑–≤–æ–ª—è—é –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç—É\n"
    )
    await message.answer(text, reply_markup=main_keyboard)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
@dp.message(lambda message: message.text == "üÜï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def ask_task_text(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
    await state.set_state(TaskState.waiting_for_task_text)


@dp.message(TaskState.waiting_for_task_text)
async def save_task(message: types.Message, state: FSMContext):
    if not message.text.strip():
        await message.answer("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π!")
        return

    today = datetime.today().strftime('%Y-%m-%d')
    await add_task(message.from_user.id, message.text, today)
    await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_keyboard)
    await state.clear()


# –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
@dp.message(lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
async def show_tasks(message: types.Message):
    tasks = await get_tasks(message.from_user.id, status="pending")
    if not tasks:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.", reply_markup=main_keyboard)
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=task[1], callback_data=f"task_{task[0]}")] for task in tasks
    ])

    await message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=keyboard)


# –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–µ–π
@dp.callback_query(lambda c: c.data.startswith("task_"))
async def task_action_menu(callback_query: types.CallbackQuery):
    task_id = callback_query.data.split("_")[1]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{task_id}")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"done_{task_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{task_id}")]
    ])
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
@dp.callback_query(lambda c: c.data.startswith("edit_"))
async def edit_task(callback_query: types.CallbackQuery, state: FSMContext):
    task_id = callback_query.data.split("_")[1]
    await state.update_data(task_id=task_id)
    await state.set_state(TaskState.waiting_for_edit_text)
    await callback_query.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏:")

@dp.message(TaskState.waiting_for_edit_text)
async def save_edited_task(message: types.Message, state: FSMContext):
    data = await state.get_data()
    task_id = data.get("task_id")
    if not message.text.strip():
        await message.answer("‚ö†Ô∏è –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return

    await update_task_text(task_id, message.text)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=main_keyboard)
    await state.clear()


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
@dp.callback_query(lambda c: c.data.startswith("done_"))
async def mark_done(callback_query: types.CallbackQuery):
    task_id = callback_query.data.split("_")[1]
    await update_task_status(task_id, "done")
    await callback_query.message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=main_keyboard)


# –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏
@dp.callback_query(lambda c: c.data.startswith("cancel_"))
async def cancel_task(callback_query: types.CallbackQuery):
    task_id = callback_query.data.split("_")[1]
    await update_task_status(task_id, "canceled")
    await callback_query.message.answer("‚ùå –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!", reply_markup=main_keyboard)


# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
@dp.message(lambda message: message.text == "üìä –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ")
async def show_completed_and_canceled(message: types.Message):
    done_tasks = await get_tasks(message.from_user.id, status="done", grouped_by_date=True)
    canceled_tasks = await get_tasks(message.from_user.id, status="canceled", grouped_by_date=True)

    if not done_tasks and not canceled_tasks:
        await message.answer("‚úÖ‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.", reply_markup=main_keyboard)
        return

    text = "üìä –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n"

    for date, tasks in sorted(done_tasks.items()):
        text += f"üìÖ {date} (‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ):\n"
        for task in tasks:
            text += f"  - {task[1]}\n"

    for date, tasks in sorted(canceled_tasks.items()):
        text += f"üìÖ {date} (‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ):\n"
        for task in tasks:
            text += f"  - {task[1]}\n"

    await message.answer(text, reply_markup=main_keyboard)

async def main():
    await init_db()
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
